!function(t,e){function n(t,e){if(t instanceof l)return t;if(t instanceof EventTarget)return new l(t);if(void 0===t||null===t)return new l;if("string"!=typeof t)throw new Error("First parameter is invalid");if(e){if(!u(e))throw new Error("Second parameter is invalid");e=n(e)}else e=p;return s(e,t)}function r(t,e){return e.call(t,t)}function i(t,e){return t===e}function s(t,e){var n=new l;return t.forEach(function(t){n.push.apply(n,o(t,e))}),n}function o(t,e){return~e.indexOf(":")&&void 0!==m?(m===!1&&f(),e.match(m)?a(t,e):t.querySelectorAll(e)):t.querySelectorAll(e)}function a(t,e){for(var n,r,i=new l(t),s="",o=e.split(/\s+/);n=o.shift();)r=n.match(m),r?(s+=n.replace(m,"")||"*",n=new l,i.forEach(function(t){var e=new l;r.forEach(function(n){e.push.apply(e,y[n].call(t,s))}),n.push.apply(n,e)}),i=n,s=""):s+=n+" ";return s&&(n=new l,i.forEach(function(t){n.push.apply(n,t.querySelectorAll(s))}),i=n),i}function f(){var t=Object.keys(y).join("|").replace(/:/g,"");m=new RegExp(":("+t+")","g")}function u(t){return t instanceof l?!0:t instanceof EventTarget?!0:"string"==typeof t?!0:void 0}function c(t){return function(){for(var e=0,n=this.length;n>e;e++)t.apply(this[e],arguments);return this}}function h(t){return function(){for(var e,n=0,r=this.length,i=new l;r>n;n++)e=t.apply(this[n],arguments),e&&(Array.isArray(e)&&e.length?i.push.apply(i,e):i.push(e));return i}}var l,d,p,v;try{v=e.createElement("iframe"),v.style.width=0,v.style.height=0,v.style.borderStyle="none",e.body.appendChild(v),l=v.contentWindow.Array,e.body.removeChild(v)}catch(g){l=Array}t.z=n,n.fn=l.prototype,d=n(t),p=n(e),n.fn.find=function(t){if("string"!=typeof t)throw new Error("First paramater of z#find() should be a string");return s(this,t)},n.fn.data="dataset"in e.body?function(t,e){var n,r;if(this.length){if(void 0===t)return this[0].dataset;if(void 0===e)return this[0].dataset[t];for(n=0,r=this.length;r>n;n++)this[n].dataset[t]=e;return this}}:function(t,e){var n,r,i="data-"+(t||"");if(this.length){if(void 0===t)return n={},[].forEach.call(this[0].attributes,function(t){return n[t.name]=t.value}),n;if(void 0===e)return this[0].attributes[i];for(n=0,r=this.length;r>n;n++)this[n].dataset[i]=e;return this}},n.fn.on=n.fn.bind=c(function(t,e){this.addEventListener(t,e,!1)}),n.fn.off=n.fn.unbind=c(function(t,e){this.removeEventListener(t,e,!1)}),n.fn.trigger=function(t,n){var r,i,s=0,o=this.length;try{i=n?{detail:n}:void 0,r=new CustomEvent(t,i)}catch(a){r=e.createEvent("CustomEvent"),r.initCustomEvent(t,!0,!0,n)}for(;o>s;s++)this[s].dispatchEvent(r);return this},n.fn.is=function(){var t,n=e.body;return t=n.matches||n.matchesSelector||n.msMatchesSelector,t=t||n.mozMatchesSelector||n.webkitMatchesSelector||n.oMatchesSelector,function(e){var n,s,o=0,a=this.length;switch(typeof e){case"string":n=t;break;case"function":n=r;break;case"object":if(!(e instanceof EventTarget))throw new Error("First parameter of z#is is invalid");n=i;default:throw new Error("First parameter of z#is is invalid")}for(;a>o;o++)if(s=n(this[o],e))return s;return!1}}(),n.fn.hide=c(function(){return this.style.display="none",this}),n.fn.show=c(function(){return this.style.display="",this}),n.fn.clone=function(t){var e=0;for((void 0===t||null===t)&&(t=!1);e<this.length;e++)this[e]=this[e].cloneNode(t);return this},n.fn.html=function(t){var e,n;if(void 0===t)return this.innerHTML;for(e=0,n=this.length;n>e;e++)this[e].innerHTML=t;return this},n.fn.text=function(t){var e,n;if(void 0===t)return this.textContent;for(e=0,n=this.length;n>e;e++)this[e].textContent=t;return this},n.fn.getAttr=function(t){if(!t)throw new Error("First parameter of z#getAttr is required");return this[0]&&this[0].getAttribute(t)},n.fn.setAttr=c(function(t,e){if(!t)throw new Error("First parameter of z#setAttr is required");if(void 0===e)throw new Error("Second parameter of z#setAttr is required");return this.setAttribute(t,e),this}),n.fn.attr=function(t,e){return void 0===e?this.getAttr(t):(this.setAttr(t,e),this)},n.fn.replaceWith=n.fn.replace=c(function(t){if(void 0===t)throw new Error("First parameter of z#replace is required");this.outerHTML=t}),"classList"in e.documentElement?(n.fn.addClass=c(function(t){this.classList.add(t)}),n.fn.removeClass=c(function(t){this.classList.remove(t)}),n.fn.toggleClass=c(function(t,e){return void 0===e?void this.classList.toggle(t):void this.classList[e?"add":"remove"](t)})):(n.fn.addClass=c(function(t){this.className+=" "+t}),n.fn.removeClass=c(function(t){this.className+=this.className.replace(new RegExp("(^|\\b)"+t+"(\\b|$)","g")," ")}),n.fn.toggleClass=function(t,e){return this[e?"addClass":"removeClass"](t),this});var m,y={};n.registerSelector=function(t,e){if(!t||"string"!=typeof t)throw new Error("First parameter of z#registerSelector must be a string selector");if(!e||"function"!=typeof e)throw new Error("Second parameter of z#registerSelector must be a function");":"!==t[0]&&(t=":"+t),m=!1,y[t]=e},n.registerSelector(":first",function(t){return n(this.querySelector(t))}),n.registerSelector(":input",function(){function t(t){return~e.indexOf(t.tagName)}var e="INPUT,TEXTAREA,SELECT,BUTTON".split(",");return function(e){var n=new l;return n.push.apply(n,[].filter.call(this.querySelectorAll(e),t)),n}}()),n.fn.parent=h(function(){return this.parentNode}),n.fn.next=h(function(){return this.nextElementSibling}),n.fn.prev=n.fn.previous=h(function(){return this.previousElementSibling}),n.fn.siblings=h(function(){return[].filter.call(this.parentNode.children,function(t){return t!==this},this)}),n.deepExtend=function w(t){var e,n,r=2;for("object"==typeof t?(n=t||{},t=1/0):(t=t===!0?1/0:0|t,n=arguments[1]||{});r<arguments.length;r++)if(e=arguments[r])for(var i in e)e.hasOwnProperty(i)&&(t&&"object"==typeof e[i]?w(t-1,n[i],e[i]):n[i]=e[i]);return n},n.extend=function(){return[].unshift.call(arguments,0),n.deepExtend.apply(null,arguments)},n.fn.each=c(function(t){return t.call(this,this),this})}(window,document);
//# sourceMappingURL=data:application/json;base64,